import json
import boto3
import hmac
import base64
import hashlib

# Password Reset Page



# Contains the identifier of an Amazon Cognito user pool. A user pool is a directory in Amazon Cognito that enables you to create and manage users who can access your...
# ... web or mobile application
USER_POOL_ID = 'us-east-2_0ir40QsU8'
# An identifier for an Amazon Cognito app client that can authenticate and authorize users against a user pool.
CLIENT_ID = '3abqghm14irg2j115092keiju7' 
# In Amazon Cognito, is a confidential key that is used to authenticate and authorize requests from the app client to the user pool
# When an app client requests an access token or a refresh toke, it must provide both CLIENT_ID and CLIENT_SECRET
CLIENT_SECRET = '1gp5nl9ndu3rhnjavhl6k367qctapfv7iq0osscncst4v40fdg79' 





def lambda_handler(event, context):
    exceptionstr = ''
    exception = False
    # Extracts data from a HTTP Post request
    data = json.loads(event['body'])
    username = data["username"]
    new_password = data["new_password"]
    
    
    # The way to access the client to cognito
    client = boto3.client("cognito-idp")
    
    e = None
    
    print(f"{username} and {new_password}")
    
    # Attempts to reset password
    try:
        # Send forgot password request
        response = client.admin_set_user_password(UserPoolId=USER_POOL_ID,Username=username,Password=new_password,Permanent=True)
    
    except Exception as e:
        exception = True
        exceptionstr = str(e);
        print("exceptionstr: ", exceptionstr);
        
    
    
    # TODO implement
    if exception == False:
        return {
            'statusCode': 200,
            'body': json.dumps({
                "message": "Password Reset Successful!"
            })
        }
    else:
        return {
            'statusCode': 500,
            'body': json.dumps({
                "message": exceptionstr
            })
        }
        